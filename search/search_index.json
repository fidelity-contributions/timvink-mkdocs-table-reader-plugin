{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#mkdocs-table-reader-plugin","title":"mkdocs-table-reader-plugin","text":"<p>MkDocs plugin that enables a markdown tag like <code>{{ read_csv('table.csv') }}</code> to directly insert various table formats into a page. </p> <p>For a workflow with other plugins see the blogpost building reproducible reports with MkDocs</p>"},{"location":"#installation","title":"Installation","text":"<p>Install the plugin using <code>pip</code>:</p> <pre><code>pip install mkdocs-table-reader-plugin\n</code></pre> <p>Next, add the following lines to your <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - search\n  - table-reader\n</code></pre> <p>If you have no <code>plugins</code> entry in your config file yet, you'll likely also want to add the <code>search</code> plugin. MkDocs enables it by default if there is no <code>plugins</code> entry set.</p>"},{"location":"#usage","title":"Usage","text":"<p>In your markdown files you can now use:</p> <pre><code>{{ read_csv('path_to_table.csv') }}\n</code></pre> <p>Where the path is relative to the location of your project's <code>mkdocs.yml</code> file (although you can change that to be relative to your <code>docs/</code> directory).</p> <ul> <li>There are readers for <code>.csv</code>, <code>.fwf</code>, <code>.json</code>, <code>.xlsx</code>, <code>.yaml</code> and <code>.tsv</code> files. There is also the <code>read_raw()</code> reader that will allow you to insert tables (or other content) already in markdown format.</li> </ul>"},{"location":"#documentation-and-how-to-guides","title":"Documentation and how-to guides","text":"<p>See timvink.github.io/mkdocs-table-reader-plugin/</p>"},{"location":"options/","title":"Options","text":"<p>You can customize the plugin by setting options in <code>mkdocs.yml</code>. For example:</p> <pre><code>plugins:\n  - table-reader:\n      base_path: \"config_dir\"\n      data_path: \".\"\n      search_page_directory: True\n      allow_missing_files: False\n      select_readers:\n        - read_csv\n        - read_json\n      enabled: True\n</code></pre>"},{"location":"options/#base_path","title":"<code>base_path</code>","text":"<p>The base path where <code>mkdocs-table-reader-plugin</code> will search for input files. The path to your table files should be relative to the <code>base_path</code>. Allowed values:</p> <ul> <li><code>config_dir</code> (default): the directory where your project's <code>mkdocs.yml</code> file is located.</li> <li><code>docs_dir</code>: the directory where your projects' <code>docs/</code> folder is located.</li> </ul> <p>If you store your table in <code>docs/assets/table.csv</code>, you can insert it in any markdown page using <code>{{ read_csv(\"docs/assets/table.csv\") }}</code>, or when <code>base_path</code> is <code>docs_dir</code>, with <code>{{ read_csv(\"assets/table.csv\") }}</code>.</p> <p>Info</p> <p>Note that by default the plugin will also search the page's directory but only when a table is not found.</p> <p>For more examples see the how to guide on project structure.</p>"},{"location":"options/#data_path","title":"<code>data_path</code>","text":"<p>The path to your table files should be relative to the <code>base_path</code>. If you use a folder for all your table files you can shorten the path specification by setting the <code>data_path</code>.</p> <p>For example, if your table is located in <code>docs/tables/basic_table.csv</code>, you can set <code>data_path</code> to <code>docs/tables/</code> and leave <code>base_path</code> to the default <code>config_dir</code>. Then you will be able to use <code>{{ read_csv(\"basic_table.csv\") }}</code> instead of <code>{{ read_csv(\"docs/tables/basic_table.csv\") }}</code> inside any markdown page.</p> <p>Default is <code>.</code>, which means you need to specify the path to your table files relative to the <code>base_path</code>.</p> <p>Info</p> <p>Note that by default the plugin will also search the page's directory but only when a table is not found.</p> <p>For more examples see the how to guide on project structure.</p>"},{"location":"options/#search_page_directory","title":"<code>search_page_directory</code>","text":"<p>Default: <code>True</code>. When enabled, if a filepath is not found, the plugin will also attempt to find the file relative to the current page's directory.</p> <p>Info</p> <p>Note that even when <code>True</code>, the path relative to <code>data_path</code> is searched first, and if a file is not found there, then the page's directory is searched.</p> <p>For more examples see the how to guide on project structure.</p>"},{"location":"options/#allow_missing_files","title":"<code>allow_missing_files</code>","text":"<p>Default: <code>False</code>. When enabled, if a filepath is not found, the plugin will raise a warning instead of an error.</p>"},{"location":"options/#select_readers","title":"<code>select_readers</code>","text":"<p>Default: Selects all available readers. Specify a list of reader to improve documentation build times for large sites.</p>"},{"location":"options/#enabled","title":"<code>enabled</code>","text":"<p>Default is <code>True</code>. Enables you to deactivate this plugin. This option is supported by all plugins since mkdocs 1.6 (see docs). A possible use case is local development where you might want faster build times and/or do not have the tables ready. It's recommended to use this option with an environment variable together with a default fallback (introduced in mkdocs v1.2.1, see docs). Example:</p>  mkdocs.yml <pre><code>plugins:\n  - table-reader:\n      enabled: !ENV [ENABLED_TABLE_READER, True]\n</code></pre> <p>Which enables you to disable the plugin locally using:</p> <pre><code>export ENABLED_TABLE_READER=false\nmkdocs serve\n</code></pre>"},{"location":"readers/","title":"Readers","text":"<p>The following table reader functions are available:</p>"},{"location":"readers/#read_csv","title":"read_csv","text":"<p><code>{{ read_csv() }}</code> passed to pandas.read_csv(). Example:</p> InputOutput <p><code>{{ read_csv('tables/basic_table.csv') }}</code></p> a b 40 73 50 52 531456.123 80 name table1"},{"location":"readers/#read_fwf","title":"read_fwf","text":"<p><code>{{ read_fwf() }}</code> passed to pandas.read_fwf(). Example:</p> InputOutput <p><code>{{ read_fwf('tables/fixedwidth_table.txt') }}</code></p> Brand Price Honda Civic 22001 Toyota Corolla 25000 Ford Focus 27000 Audi A4 35000"},{"location":"readers/#read_yaml","title":"read_yaml","text":"<p><code>{{ read_yaml() }}</code> is parsed with yaml.safe_load() and passed to pandas.json_normalize(). Example:</p> InputOutput <p><code>{{ read_yaml('tables/yaml_table.yml') }}</code></p> a b 40 73 50 52 531456 80 name table1"},{"location":"readers/#read_table","title":"read_table","text":"<p><code>{{ read_table() }}</code> passed to pandas.read_table(). Example:</p> InputOutput <p><code>{{ read_table('tables/basic_table.csv', sep = ',') }}</code></p> a b 40 73 50 52 531456.123 80 name table1"},{"location":"readers/#read_json","title":"read_json","text":"<p><code>{{ read_json() }}</code> passed to pandas.read_json(). Example:</p> InputOutput <p><code>{{ read_json('tables/data.json', orient='split') }}</code></p> col 1 col 2 a b c d"},{"location":"readers/#read_feather","title":"read_feather","text":"<p><code>{{ read_feather() }}</code> passed to pandas.read_feather(). Example:</p> InputOutput <p><code>{{ read_json('tables/data.feather') }}</code></p> col 1 col 2 a b c d"},{"location":"readers/#read_excel","title":"read_excel","text":"<p><code>{{ read_excel() }}</code> passed to pandas.read_excel(). Example:</p> InputOutput <p><code>{{ read_excel('tables/excel_table.xlsx', engine='openpyxl') }}</code></p> a b 40 73 50 52 531456 8 <p>Reading xlsx files</p> <p>You might get a <code>XLRDError('Excel xlsx file; not supported',)</code> error when trying to read modern excel files. That's because <code>xlrd</code> does not support <code>.xlsx</code> files (stackoverflow post). Instead, install openpyxl and use:</p> <p><code>{{ read_excel('tables/excel_table.xlsx', engine='openpyxl') }}</code></p>"},{"location":"readers/#read_raw","title":"read_raw","text":"<p><code>{{ read_raw() }}</code> inserts contents from a file directly. This is great if you have a file with a table already in markdown format.  It could also replace a workflow where you use the snippets extension to embed external files.</p> <p>Example:</p> InputOutput <p><code>{{ read_raw('tables/markdown_table.md') }}</code></p> Tables Are Cool col 1 is left-aligned $1600 col 2 is centered $12 col 3 is right-aligned $1"},{"location":"assets/tables/markdown_table/","title":"Markdown table","text":"Tables Are Cool col 1 is left-aligned $1600 col 2 is centered $12 col 3 is right-aligned $1"},{"location":"howto/alternatives/","title":"Consider alternatives","text":"<p>This plugin is built to be able to quickly insert table files anywhere in a markdown file. </p> <p>You could also consider alternative approaches that might fit your use-case better.</p>"},{"location":"howto/alternatives/#write-tables-to-markdown-files","title":"Write tables to markdown files","text":"<p>You could write a script (maybe triggered by a mkdocs hook) that writes the tables you need into markdown files. It could look something like this:</p> <pre><code># write markdown tables\nimport pandas as pd\n\nmd = pd.read_csv(\"your_file.csv\").to_markdown()\nwith open(\"docs/assets/tables/my_file.md\", \"w\") as f:\n    f.write(md)\n</code></pre> <p>You can then use the snippets extension to insert the tables into your markdown pages:</p> <pre><code># some_page.md\n\nMy table:\n\n--8&lt;-- \"assets/tables/my_file.md\"\n</code></pre> <p>Upsides:</p> <ul> <li>Easy, fast, low on dependencies</li> <li>You can see changes of your tables in version control</li> </ul> <p>Downsides:</p> <ul> <li>You need to generate/update the markdown files on every build</li> <li>if you move the page you have to update the path (if you used a relative path for the snippet)</li> </ul>"},{"location":"howto/alternatives/#execute-python-during-build","title":"Execute python during build","text":"<p>You could also choose to insert the markdown for tables dynamically, using packages like markdown-exec or mkdocs-macros-plugin.</p> <p>For example:</p> <pre><code>```python exec=\"true\"\nimport pandas as pd\n\nfile_path = \"path/to/file/from/project/root\"\nprint(pd.read_csv(file_path).to_markdown(index=False, disable_numparse=True))\n```\n</code></pre>"},{"location":"howto/customize_tables/","title":"Customize markdown tables","text":"<p>You can customize the resulting markdown tables! </p>"},{"location":"howto/customize_tables/#theory","title":"Theory","text":"<p>Under the hood <code>mkdocs-table-reader-plugin</code> is basically doing:</p> <pre><code>import pandas as pd\ndf = pd.read_csv('path_to_table.csv')\ndf.to_markdown(index=False, tablefmt='pipe')\n</code></pre> <p>Any keyword arguments you give to <code>{{ read_csv('path_to_your_table.csv') }}</code> will be matched and passed the corresponding pandas.read_csv() and/or  .to_markdown() functions. </p> <p>Pandas's <code>.to_markdown()</code> uses the tabulate package and any keyword arguments that are passed to it. Tabulate in turn offers many customization options, see library usage. </p>"},{"location":"howto/customize_tables/#aligning-columns","title":"Aligning columns","text":"<p>Text columns will be aligned to the left by default, whilst columns which contain only numbers will be aligned to the right. You can override this behaviour using tabulate's custom column alignment. Example:</p>  left center right <p><code>{{ read_csv('tables/basic_table.csv', colalign=(\"left\",)) }}</code></p> a b 40 73 50 52 531456.123 80 name table1 <p><code>{{ read_csv('tables/basic_table.csv', colalign=(\"center\",)) }}</code></p> a b 40 73 50 52 531456.123 80 name table1 <p><code>{{ read_csv('tables/basic_table.csv', colalign=(\"right\",)) }}</code></p> a b 40 73 50 52 531456.123 80 name table1"},{"location":"howto/customize_tables/#sortable-tables","title":"Sortable tables","text":"<p>If you use mkdocs-material, you can configure sortable tables.</p>"},{"location":"howto/customize_tables/#number-formatting","title":"Number formatting","text":"<p>You can use tabulate's number formatting. Example:</p> <p><code>{{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".0f\") }}</code></p> Brand Price Honda Civic 22001 Toyota Corolla 25000 Ford Focus 27000 Audi A4 35000 <p><code>{{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".1f\") }}</code></p> Brand Price Honda Civic 22001.0 Toyota Corolla 25000.0 Ford Focus 27000.0 Audi A4 35000.0 <p><code>{{ read_fwf('tables/fixedwidth_table.txt', floatfmt=\".2f\") }}</code></p> Brand Price Honda Civic 22001.00 Toyota Corolla 25000.00 Ford Focus 27000.00 Audi A4 35000.00"},{"location":"howto/docker/","title":"Use with docker","text":"<p>If you follow the <code>mkdocs-material</code> tutorial on installation with <code>docker</code>, you will run into an error if you try to add this plugin saying:</p> <p>\u00d7 Building wheel for numpy (pyproject.toml) did not run successfully.</p> <p>The reason is that the <code>mkdocs-material</code> docker image uses the <code>alpine</code> image. <code>mkdocs-table-reader-plugin</code> depends on <code>pandas</code>, which depends on <code>numpy</code>, which in turn requires C++ to install, which is not part of the <code>alpine</code> image.</p> <p>If you need a very small image, you can adapt the alpine image to support numpy, but you are better off using a more complete docker image like <code>python-slim</code>. So you need to build a different docker image.</p> <p>As an example, below is a <code>Dockerfile</code> that is adapted from the mkdocs-material dockerfile. You can use it to create a new Docker image that supports <code>mkdocs-table-reader-plugin</code>:</p> <pre><code>git clone https://github.com/squidfunk/mkdocs-material.git material-git/\ncd material-git\n# Manually replace `Dockerfile` with the example below\ndocker build -t YOUR-CONTAINER-NAME .\n# Now, inside your own project, you can use:\ndocker run --rm -it -p 8000:8000 -v ${PWD}:/docs YOUR-CONTAINER-NAME\n</code></pre> Dockerfile <p><pre><code>FROM python:3-slim\n\n# Build-time flags\nARG WITH_PLUGINS=true\n\n# Environment variables\nENV PACKAGES=/usr/local/lib/python3.11/site-packages\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Set build directory\nWORKDIR /tmp\n\n# Copy files necessary for build\nCOPY material-git/material material\nCOPY material-git/package.json package.json\nCOPY material-git/README.md README.md\nCOPY material-git/requirements.txt requirements.txt\nCOPY material-git/pyproject.toml pyproject.toml\n\n# Perform build and cleanup artifacts and caches\nRUN \\\napt update \\\n&amp;&amp; \\\napt install -y \\\n    libcairo2-dev \\\n    libfreetype6-dev \\\n    git \\\n    libturbojpeg-dev \\\n    openssh-server \\\n    zlib1g-dev \\\n&amp;&amp; \\\napt install -y \\\n    gcc \\\n    libffi-dev \\\n    musl-dev \\\n&amp;&amp; \\\npip install --no-cache-dir . \\\n&amp;&amp; \\\nif [ \"${WITH_PLUGINS}\" = \"true\" ]; then \\\n    pip install --no-cache-dir \\\n    \"mkdocs-minify-plugin&gt;=0.3\" \\\n    \"mkdocs-redirects&gt;=1.0\" \\\n    \"pillow&gt;=9.0\" \\\n    \"cairosvg&gt;=2.5\" \\\n    \"mkdocs-table-reader-plugin\" \\\n    ; \\\nfi \\\n&amp;&amp; \\\nfor theme in mkdocs readthedocs; do \\\n    rm -rf ${PACKAGES}/mkdocs/themes/$theme; \\\n    ln -s \\\n    ${PACKAGES}/material \\\n    ${PACKAGES}/mkdocs/themes/$theme; \\\ndone \\\n&amp;&amp; \\\nrm -rf /tmp/* /root/.cache \\\n&amp;&amp; \\\nfind ${PACKAGES} \\\n    -type f \\\n    -path \"*/__pycache__/*\" \\\n    -exec rm -f {} \\;\n\n# Trust directory, required for git &gt;= 2.35.2\nRUN git config --global --add safe.directory /docs &amp;&amp;\\\n    git config --global --add safe.directory /site\n\n# Set working directory\nWORKDIR /docs\n\n# Expose MkDocs development server port\nEXPOSE 8000\n\n# Start development server by default\nENTRYPOINT [\"mkdocs\"]\nCMD [\"serve\", \"--dev-addr=0.0.0.0:8000\"]\n</code></pre>     \"mkdocs-table-rea</p>"},{"location":"howto/preprocess_tables/","title":"Preprocess input tables","text":"<p><code>mkdocs&gt;=1.4</code> supports hooks, which enable you to run python scripts on <code>mkdocs serve</code> or <code>mkdocs build</code>.</p> <p>Here are some example of workflows that use hooks and the <code>table-reader</code> plugin:</p>"},{"location":"howto/preprocess_tables/#combine-a-directory-of-tables-into-a-single-larger-table","title":"Combine a directory of tables into a single, larger table.","text":"hooks.pyindex.mdmkdocs.ymlProject structure <pre><code>from os import listdir\nfrom os.path import isfile, join\nimport pandas as pd\n\ndef on_pre_build(config, **kwargs) -&gt; None:\n    tables = []\n    input_files = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n    for table in input_files:\n        tables.append(pd.read_csv(table))\n    df = pd.concat(tables, ignore_index=True)\n    df.to_csv(\"docs/assets/output_table.csv\")\n</code></pre> <p><code> My table: {{ read_csv(\"docs/assets/output_table.csv\") }} </code></p> <pre><code># ...\nplugins:\n    - table-reader\nhooks:\n    - scripts/hooks.py\n# ...\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500\u2500 hooks.py\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 assets/tables/\n\u2502       \u2514\u2500\u2500 table1.csv\n\u2502       \u2514\u2500\u2500 table2.csv\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"howto/preprocess_tables/#download-a-table-from-an-api","title":"Download a table from an API","text":"hooks.pyindex.mdmkdocs.ymlProject structure <pre><code>import pandas as pd\n\ndef on_pre_build(config, **kwargs) -&gt; None:\n    df = pd.read_csv('https://data.cityofnewyork.us/resource/nu7n-tubp.csv?$limit=100')\n    df.to_csv(\"docs/assets/nyc_data.csv\")\n</code></pre> <p><code> My table: {{ read_csv(\"docs/assets/nyc_data.csv\") }} </code></p> <pre><code># ...\nplugins:\n    - table-reader\nhooks:\n    - scripts/hooks.py\n# ...\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500\u2500 hooks.py\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 assets/\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <p>Note that during development when you use <code>mkdocs serve</code> and autoreload, you might not want to run this hook every time you make a change. You could use an environment variable inside your hook, for example something like <code>if os.environ['disable_hook'] == 1: return None</code>.</p>"},{"location":"howto/project_structure/","title":"Choose a project structure","text":"<p>You have different possible strategies to store and load your tables. This guide gives some examples.</p>"},{"location":"howto/project_structure/#one-table-per-markdown-file","title":"One table per markdown file","text":"<p>If you only want to include an occasional table in a specific markdown file, just store it in the same directory as the markdown file:</p> project structurefolder/page.md <pre><code>.\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 folder/\n\u2502       \u2514\u2500\u2500 another_table.csv\n\u2502       \u2514\u2500\u2500 page.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <pre><code>Here is the table:\n\n\\{\\{ read_csv(\"another_table.csv\") \\}\\}\n</code></pre> <p>This works because the option <code>search_page_directory</code> defaults to <code>True</code>.</p>"},{"location":"howto/project_structure/#re-using-tables-across-markdown-files","title":"Re-using tables across markdown files","text":"<p>If you want to reuse tables in multiple markdown files, you'll want to store them in a central directory, like <code>docs/assets/tables</code>.  That way, if you restructure your navigation, the links to the tables won't break either. It's also great if you generate tables because the output directory will be the same.</p> <p>Given the following project structure:</p> <pre><code>.\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 folder/\n\u2502       \u2514\u2500\u2500 page.md\n\u2502   \u2514\u2500\u2500 assets/\n\u2502       \u2514\u2500\u2500 tables/\n\u2502           \u2514\u2500\u2500 another_table.csv\n\u2502           \u2514\u2500\u2500 page.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <p>In <code>page.md</code>, to read <code>basic_table.csv</code>, you can choose to use:</p> <ul> <li><code>{{ read_csv(\"docs/assets/tables/another_table.csv\") }}</code> when <code>base_path</code> option is set to <code>config_dir</code> (default)</li> <li><code>{{ read_csv(\"assets/tables/another_table.csv\") }}</code> when <code>base_path</code> option is set to <code>docs_dir</code></li> <li><code>{{ read_csv(\"../another_table.csv\") }}</code> if you want to use a relative path and <code>search_page_directory</code> option is enabled (default). Note that <code>..</code> stands for \"one directory up\".</li> </ul>"},{"location":"howto/project_structure/#a-central-table-directory-combined-with-same-directory-tables","title":"A central table directory combined with same-directory tables","text":"<p>If you have some central tables that you want to reuse, and some tables that are specific to a page, you could use the following project structure:</p> <pre><code>.\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 tables/\n\u2502   |   \u2514\u2500\u2500 basic_table.csv\n\u2502   \u2514\u2500\u2500 folder/\n\u2502       \u2514\u2500\u2500 another_table.csv\n\u2502       \u2514\u2500\u2500 page.md\n\u2514\u2500\u2500 mkdocs.yml\n</code></pre> <p>In <code>page.md</code>, to read <code>basic_table.csv</code>, you can choose to use:</p> <ul> <li><code>{{ read_csv(\"docs/tables/basic_table.csv\") }}</code> when <code>base_path</code> option is set to <code>config_dir</code> (default)</li> <li><code>{{ read_csv(\"tables/basic_table.csv\") }}</code> when <code>base_path</code> option is set to <code>docs_dir</code></li> <li><code>{{ read_csv(\"basic_table.csv\") }}</code> when:<ul> <li><code>bash_path</code> option is set to <code>config_dir</code> and <code>data_path</code> is set to <code>docs/tables</code>, OR</li> <li><code>bash_path</code> option is set to <code>docs_dir</code> and <code>data_path</code> is set to <code>tables</code></li> </ul> </li> </ul> <p>In <code>page.md</code>, to read <code>another_table.csv</code>, you can choose to use:</p> <ul> <li><code>{{ read_csv(\"docs/folder/another_table.csv\") }}</code> when <code>base_path</code> is set to <code>config_dir</code> (default)</li> <li><code>{{ read_csv(\"folder/another_table.csv\") }}</code> when <code>base_path</code> is set to <code>docs_dir</code></li> <li><code>{{ read_csv(\"another_table.csv\") }}</code> when:<ul> <li><code>search_page_directory</code> option is enabled (default), OR</li> <li><code>bash_path</code> option is set to <code>config_dir</code> and <code>data_path</code> is set to <code>docs/folder</code>, OR</li> <li><code>bash_path</code> option is set to <code>docs_dir</code> and <code>data_path</code> is set to <code>folder</code></li> </ul> </li> </ul>"}]}